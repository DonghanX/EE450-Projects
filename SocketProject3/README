
Name: Donghan Xia
Student ID: 7022775451

Program Description

1. What I have done in the project

All the programming work (except those from Beej's Guide mentioned in the function header comments) includes:
    (1) Implements two backend servers that are able to read and store all the state-usergroups mapping information 
	from the given dataA.txt/dataB.txt file, receive state name and user ID sent from main server, query the 
	corresponding users in same group, and send the query result to main server.

    (2) Implements main server that could build TCP connections with multiple clients concurrently, receive the input
	state name and user ID from clients individually, find the backend server that is responsible for the state 
	name, send the state name and user ID to corresponding backend server, and receive the query result from the 
	backend servers.

    (3) Implements client that is able to input state name and user ID, send the state name and user ID to main server
	, and receive query result or Not-Found message from main server.

All the comments that helps understand the principle of the programs.

2. Code files and their responsibilities

serverA.h
    The header file that contains the declarations of member functions in serverA.cpp.

serverA.cpp
    (1) Reads the datas each line from dataA.txt using infile stream.

    (2) Stores all the information into std container std::multimap<std::string, std::vector<std::string>>, where the 
	key is state name and the value is the multimap::iterator that could iterate all the user ID vector corresponding
	to the state name.

    (3) Sends its responsible state list to main server to reply the initial request from main server.

    (4) Receives state name sent from main server and queries the multimap to retrieve the multimap::iterator corresponding 
	to the state name key. Converts all the user-ID vector to a single user-ID set to ensure the uniquity of recommended
	user IDs, while extracting the requested user ID from the set.

    (5) Sends the query results to main server in a specific format accroding to the query results, such as User-Not-Found 
	signal and User-Potential-Friends list.

serverB.h
    The header file that contains the declarations of member functions in serverB.cpp.

serverB.cpp
    Actually does the same thing as the serverA.cpp. However, the port number for bind() and the original data 
    file is different from serverA.cpp.

servermain.h
    The header file that contains the declarations of member functions in servermain.cpp.

servermain.cpp
    (1) Sends initial requests to each backend server and receives their responsibilities of state.

    (2) Stores the state-backendId mapping information in the std container std::map<std::string, char>.

    (3) Establishes TCP connections between main server and remote client and creates a child process for each 
	connection to support concurrent TCP connections with multiple clients. Assigns each client a unique ID.

    (4) Receives state name and user ID from client. Finds the corresponding backend server A or B using State-Backend map.

    (5) Sends the state name and user ID to the correct backend server (if the state name could be found). 
	Receives the query results or Not-Found messages from backend server. Sends the query results or 
	the messages to the client.

client.h
    The header file that contains the declarations of member functions in client.cpp.

client.cpp
    (1) Bootups client to prepare for connecting to main server and then establishes TCP connection.

    (2) Sends the input state name and user ID to main server through TCP connection. Waits for the query results or messages
	sent from main server.

    (3) Checks if the contents received contains Not-Found signals. Converts the received contents to a more readable format
	according to the project requirements.


3. The format of all the messages exchanged
    (1) The messages to be sent is in c-style string format, which has be converted from Cpp-style string, 
    	as we all know, std::string, to char* using std::string::c_str() function. That is because I basically use 
    	std::string to store input city name and search results for brevity.

    (2) Similarly, the Contents (messages) to be received is in c-style string format, which should be passed into
    	vector<char> container to serve as a more C++ style buffer.

    (3) In order to distinguish the first request sent from mainserver for state responsibilities from the ordinary
	sending request, I pre-defined a request signal string, which has content of "###request###". When backend 
	server receives content like this, it will send its responsibility of state to the main server rather than
	consider the received content as a state name for querying.

    (4) To distinguish the Not-Found messages from the ordinary query results, I pre-defined two Not-Found signals. 
	If a state name could not be found in the state-backend map in the main server, then the Not-Found message
	should be "###statenotfound###", which will be sent from main server directly to client, instead of asking backend
	server for the query result. If a user name could not be found in the state-group multimap in the backend server, 
	then the Not-Found message should be "###notfound###", which will be send from corresponding backend server to 
	the client through the main server.

4.Idiosyncrasy
    (1) The project utilizes several C++11 features. For instance, range iterator.

    (2) The project uses std::multimap<string, vector<string>> to store state-group information of users. It is more 
	advantageous to use multimap, instead of map<string, vector<vector>>, because the latter one has sophisticated nested
	structure, which is more time-consuming and unpredicted in memory allocation.

    (3) All the cpp files is global-paramater-free, which makes the program more brief and readable. I think the increased
	time by frequently passing parameters of function is acceptable when it compares with the cost of using global
	parameters.

    (4) The query process will fail if the data file contains the carriage return character at the end of each line (which
	could be recognized by using vi to look through the data file if the data file is edited with enter key in WinOS).
	In that case, the main server could not find the matching key in the map that stores the information of mapping
	state name to backend server id.

5.Reused Code
    I have used several codes and thoughts from Beej's Guide (https://beej.us/guide/bgnet/pdf/bgnet_usl_c_1.pdf) in 
    Chapter 5/6/9 as a reference but not directly copied, which helps me have a better understanding of socket programming
    and some functions in socket libraries. These reuesed codes have been already identified with function header comments.

